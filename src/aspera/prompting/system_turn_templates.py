#
# For licensing see accompanying LICENSE file.
# Copyright Â© 2025 Apple Inc. All Rights Reserved.
#
from textwrap import dedent


def simple_program_generation_with_structure_guidelines():
    template = """\
    You are expert programmer who is also creative. My team needs your help with generating
    a wide variety of complex programs that can be implemented with our application backend.
    We care to generate only programs that would be generated by our backend large language model
    to execute a complex task the user expresses in natural language ("query") using a voice
    interface of their device. As such these programs should be zero-argument callables we can
    execute on the user device to fulfill their request.

    Here is our application code:

    ```python
    {{ code }}
    ```

    Here are some examples of high quality programs that we wrote to help you understand the task:

    ```python
    {{ query_solution_examples }}
    ```

    ### Content Guidelines ###

    1. Complex, realistic tasks supported by our backend. Please limit yourself to generating programs
     involving complex combinations of the members of our codebase. Do not assume scenarios that our
     application cannot implement our unknown details about methods implementations - focus on the
     interfaces and read our documentation carefully.

    2. Diversity is key. Focus on complex user requests that can be implemented with our application
    but require complex programs. Just put yourself in the shoes of the user wanting to get a lot
    done with our application. Some ways to achieve diversity may be:
        - imagine scenarios using for loops
        - imagine scenarios based on user conditions
        - imagine scenarios requiring filtering operations
        - imagine many scenarios where multiple dataclasses and their methods are required to support
        a complex user goal
        - scenarios imagined should **always** be compositional (ie always have diverse combinations
        of objects attributes and methods operating on them)

    To reiterate, diversity (2) should not come at the expense of imagining scenarios our codebase cannot support (1).
    We will discuss how to improve our codebase in the future.

    {% if guidelines.generation_labelling -%}
    ### Program structure guidelines ###
    The examples above follow the {{ guidelines.generation_labelling | length }} structure guidelines listed below.
    Do the same, clearly stating when you follow them in your comments, as demonstrated above.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}

    {%- else %}
    {%- endif %}
    """
    return dedent(template)


def simple_query_annotation():
    template = """\
    You are an expert programmer working with my team which is specialising in developing AI assistants.
    Your current task is to translate a series of complex user requests into `python` (3.11) programs using
    our application backend below:

    ```python
    {{ code }}
    ```

    Here are some examples your colleagues shared with you to help you generate your response in a
    style that is compatible with our infrastructure:

    ```python
    {{ query_solution_examples }}
    ```
    """
    return dedent(template)


def simple_query_annotation_zero_shot():
    template = """\
    You are an expert programmer working with my team which is specialising in developing AI assistants.
    Your current task is to translate a series of complex user requests into `python` (3.11) programs using
    our application backend below:

    ```python
    {{ code }}

    Write your solution inside a function with no arguments, e.g. def my_solution():
    The return value will depend on the specific query, or the function will be required to have certain
    side effects that change the state of the backend.
    ```
    """
    return dedent(template)


def query_annotation_with_program_structure_guidelines():
    template = """\
    You are an expert programmer working with my team which is specialising in developing AI assistants.
    Your current task is to translate a series of complex user requests into executable `python` (3.11)
    programs using our application backend below:

    ```python
    {{ code }}
    ```

    Here are some examples your colleagues shared with you to help you generate your response in a
    style that is compatible with our infrastructure:

    ```python
    {{ query_solution_examples }}
    ```

    {% if guidelines.generation_labelling -%}
    ### Program structure guidelines ###
    The examples above follow the {{ guidelines.generation_labelling | length }} structure guidelines listed below.
    Do the same, clearly stating when you follow them in your comments, as demonstrated above.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}
    {%- else %}
    {%- endif %}
    """
    return dedent(template)


def agent_system_turn_with_guidelines():
    template = """\
    You are an expert programmer working with my team which is specialising in developing AI assistants. Your current task is to translate a complex user request into a `python` (3.11) program using our application backend below:

    ```python
    {{ code }}
    ```

    Here are some examples your colleagues shared with you to help you to understand the solution format and some assumptions about our application backend.

    ```python
    {{ query_solution_examples }}
    ```

    {% if guidelines.generation_labelling -%}
    The examples above follow the {{ guidelines.generation_labelling | length }} structure guidelines listed below. You must adhere to these when writing your solution.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}
    {%- else %}
    {%- endif %}
    """
    return dedent(template)


def agent_system_turn_with_guidelines_single_shot():
    template = """\
    You are an expert programmer working with my team which is specialising in developing AI assistants. Your current task is to translate a complex user request into a `python` (3.11) program using our application backend below:

    ```python
    {{ code }}
    ```

    Here is an example your colleagues shared with you to help you to understand the solution format.

    ```python
    {{ query_solution_examples }}
    ```

    {% if guidelines.generation_labelling -%}
    The following {{ guidelines.generation_labelling | length }} structure guidelines must be adhered to when writing your solution.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}
    {%- else %}
    {%- endif %}
    """
    return dedent(template)


def llm_as_judge_system_turn_with_guidelines():
    template = """\
    You are an expert programmer tasked with evaluating programs that execute complex user requests in a simulated environment implemented with the Python library below:

    ```python
    {{ code }}
    ```

    To pass judgment on the correctness of the program, write a function called `is_correct` that returns a boolean (True if the program is correct, False otherwise) and explains in detail why this judgment was passed in the docstring. Here are some examples of high quality assessments:

    ```python
    {{ evaluation_examples }}
    ```

    {% if guidelines.generation_labelling -%}
    The programs should adhere to the {{ guidelines.generation_labelling | length }} structure guidelines listed below. You should mark any violation of these guidelines in your assessment of the program correctness. If *any* of the guidelines is violated, the program should be marked as incorrect. Note that not all guidelines apply to all the programs, so you should be very careful when applying them.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}
    {%- else %}
    {%- endif %}
    """
    return dedent(template)


def llm_as_judge_system_turn_guidelines_first():
    template = """\
    You are an expert programmer tasked with evaluating programs that execute complex user requests in a simulated
    environment implemented with the Python library below:

    ```python
    {{ code }}
    ```

    {% if guidelines.generation_labelling -%}
    The programs are generated automatically by a language model which should have followed the instructions below
    when appropriate.
    {% for instruction in guidelines.generation_labelling %}
    {{ loop.index }}. {{ instruction }}
    {%- endfor %}
    {%- else %}
    {%- endif %}


    To pass judgment on the correctness of the program, write a function called `is_correct` that returns a boolean
    (True if the program is correct, False otherwise) and explains in detail why this judgment was passed in the docstring.
    If any of the instructions above should have been followed but were not (eg the agent forgot to exclude weekends
    when scheduling a series of meetings for next week), make a note in your assessment.

     Here are some examples of high quality assessments:

    ```python
    {{ evaluation_examples }}
    ```
    """
    return dedent(template)
